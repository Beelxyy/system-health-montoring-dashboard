REFRESH_RATE=3
FILTER="all"
LOG_FILE="system_health_log.txt"
CPU_THRESHOLD=80
MEMORY_THRESHOLD=75
DISK_THRESHOLD=75


RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RESET='\033[0m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'

HOSTNAME=$(hostname)
    UPTIME=$(uptime -p)
    DATE=$(date "+%Y-%m-%d %H:%M:%S")
}


get_cpu_usage() {
    CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    TOP_PROCESSES=$(ps aux --sort=-%cpu | head -n 5 | awk '{print $11 " (" $3 "%)"}' | sed 's/^/  /')
}

get_memory_usage() {
    MEM_INFO=$(free -h | grep Mem)
    TOTAL_MEM=$(echo $MEM_INFO | awk '{print $2}')
    USED_MEM=$(echo $MEM_INFO | awk '{print $3}')
    MEM_PERCENT=$(echo $MEM_INFO | awk '{print int($3/$2 * 100)}')
    FREE_MEM=$(echo $MEM_INFO | awk '{print $4}')
    CACHE_MEM=$(echo $MEM_INFO | awk '{print $6}')
    BUFFERS_MEM=$(echo $MEM_INFO | awk '{print $7}')
}


get_disk_usage() {
    DISK_USAGE=$(df -h | grep -E '^/dev/' | awk '{print $1 " " $5 " " $6}')
}

get_network_usage() {
    NETWORK_USAGE=$(ifstat -i eth0 1 1 | tail -n 1 | awk '{print $1 " " $2}')
}

usage_bar() {
    local PERCENT=$1
    local MAX=50
    local FILLED=$(($PERCENT * $MAX / 100))
    local EMPTY=$(($MAX - $FILLED))
    local BAR=$(printf "%-${FILLED}s" "█")
    local EMPTY_BAR=$(printf "%-${EMPTY}s" "░")
    echo -n "$BAR$EMPTY_BAR"
}


log_anomaly() {
    local TYPE=$1
    local VALUE=$2
    local THRESHOLD=$3
    echo "$(date "+%Y-%m-%d %H:%M:%S") - $TYPE usage exceeded $THRESHOLD% ($VALUE%)" >> "$LOG_FILE"
}


check_threshold() {
    local VALUE=$1
    local THRESHOLD=$2
    if ((VALUE >= THRESHOLD)); then
        echo -e "${RED}$VALUE%${RESET}"
    elif ((VALUE >= THRESHOLD - 10)); then
        echo -e "${YELLOW}$VALUE%${RESET}"
    else
        echo -e "${GREEN}$VALUE%${RESET}"
    fi
}


show_dashboard() {
    clear
    get_system_info
    get_cpu_usage
    get_memory_usage
    get_disk_usage
    get_network_usage

    echo "╔════════════ SYSTEM HEALTH MONITOR v1.0 ════════════╗"
    echo "║ Hostname: $HOSTNAME          Date: $DATE           ║"
    echo "║ Uptime: $UPTIME                                    ║"
    echo "╚═══════════════════════════════════════════════════════╝"
    echo ""

    # CPU usage display
    echo -n "CPU USAGE: "
    check_threshold $CPU_USAGE $CPU_THRESHOLD
    usage_bar $CPU_USAGE
    echo " $CPU_USAGE%"
    echo -e "  Process: $TOP_PROCESSES"


    echo -n "MEMORY: $USED_MEM/$TOTAL_MEM ($MEM_PERCENT%) "
    check_threshold $MEM_PERCENT $MEMORY_THRESHOLD
    usage_bar $MEM_PERCENT
    echo " $MEM_PERCENT%"
    echo -e "  Free: $FREE_MEM | Cache: $CACHE_MEM | Buffers: $BUFFERS_MEM"


    echo -e "DISK USAGE:"
    while IFS= read -r line; do
        DEVICE=$(echo $line | awk '{print $1}')
        USAGE=$(echo $line | awk '{print $2}' | sed 's/%//')
        MOUNT=$(echo $line | awk '{print $3}')
        echo -n "  $MOUNT : "
        check_threshold $USAGE $DISK_THRESHOLD
        usage_bar $USAGE
        echo " $USAGE%"
    done <<< "$DISK_USAGE"


    echo -n "NETWORK (eth0):"
    read -r IN OUT <<< "$NETWORK_USAGE"
    echo -e "  Incoming: $IN KB/s"
    echo -e "  Outgoing: $OUT KB/s"

    echo ""
    echo -e "RECENT ALERTS:"
    tail -n 5 "$LOG_FILE"

    echo ""
    echo -e "Press 'h' for help, 'q' to quit"
}

check_anomalies() {
    if ((CPU_USAGE >= CPU_THRESHOLD)); then
        log_anomaly "CPU" $CPU_USAGE $CPU_THRESHOLD
    fi

    if ((MEM_PERCENT >= MEMORY_THRESHOLD)); then
        log_anomaly "Memory" $MEM_PERCENT $MEMORY_THRESHOLD
    fi

    while IFS= read -r line; do
        USAGE=$(echo $line | awk '{print $2}' | sed 's/%//')
        if ((USAGE >= DISK_THRESHOLD)); then
            log_anomaly "Disk" $USAGE $DISK_THRESHOLD
        fi
    done <<< "$DISK_USAGE"
}

main_loop() {
    while true; do
        show_dashboard
        check_anomalies
        sleep $REFRESH_RATE
    done
}

keyboard_control() {
    while true; do
        read -n 1 -s key
        case "$key" in
            h)  echo -e "Help: Press 'q' to quit, 'r' to change refresh rate, 'f' to toggle filter\n";;
            q)  exit 0;;
            r)  echo -e "Enter new refresh rate (in seconds):"; read REFRESH_RATE;;
            f)  echo -e "Filter toggled\n";;
        esac
    done
}

